# Generated by Django 2.2.2 on 2020-11-05 06:29

import caching.base
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('ihr', '0040_auto_20200312_0844'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='asn',
            options={'base_manager_name': 'objects'},
        ),
        migrations.AlterModelOptions(
            name='atlas_delay',
            options={'base_manager_name': 'objects'},
        ),
        migrations.AlterModelOptions(
            name='atlas_delay_alarms',
            options={'base_manager_name': 'objects'},
        ),
        migrations.AlterModelOptions(
            name='atlas_location',
            options={'base_manager_name': 'objects'},
        ),
        migrations.AlterModelOptions(
            name='country',
            options={'base_manager_name': 'objects'},
        ),
        migrations.AlterModelOptions(
            name='delay',
            options={'base_manager_name': 'objects'},
        ),
        migrations.AlterModelOptions(
            name='delay_alarms',
            options={'base_manager_name': 'objects'},
        ),
        migrations.AlterModelOptions(
            name='disco_events',
            options={'base_manager_name': 'objects'},
        ),
        migrations.AlterModelOptions(
            name='disco_probes',
            options={'base_manager_name': 'objects'},
        ),
        migrations.AlterModelOptions(
            name='forwarding',
            options={'base_manager_name': 'objects'},
        ),
        migrations.AlterModelOptions(
            name='forwarding_alarms',
            options={'base_manager_name': 'objects'},
        ),
        migrations.AlterModelOptions(
            name='hegemony',
            options={'base_manager_name': 'objects'},
        ),
        migrations.AlterModelOptions(
            name='hegemony_alarms',
            options={'base_manager_name': 'objects'},
        ),
        migrations.AlterModelOptions(
            name='hegemonycone',
            options={'base_manager_name': 'objects'},
        ),
        migrations.AlterField(
            model_name='atlas_delay',
            name='endpoint',
            field=models.ForeignKey(help_text='Ending location for the delay estimation.', on_delete=django.db.models.deletion.CASCADE, related_name='location_endpoint', to='ihr.Atlas_location'),
        ),
        migrations.AlterField(
            model_name='atlas_delay',
            name='entropy',
            field=models.FloatField(default=0.0, help_text="Entropy of RTT samples with regards to probes' ASN. Values close to zero mean that Atlas probes used for these measures are located in the same AS, values close to one means that preobes are equally spread out accross multiple ASes."),
        ),
        migrations.AlterField(
            model_name='atlas_delay',
            name='hop',
            field=models.IntegerField(default=0, help_text='Median number of AS hops between the start and end locations.'),
        ),
        migrations.AlterField(
            model_name='atlas_delay',
            name='median',
            field=models.FloatField(default=0.0, help_text='Estimated median RTT. RTT values are directly extracted from traceroute (a.k.a. realrtts) and estimated via differential RTTs.'),
        ),
        migrations.AlterField(
            model_name='atlas_delay',
            name='nbprobes',
            field=models.IntegerField(default=0, help_text='Number of Atlas probes used to compute median RTT.'),
        ),
        migrations.AlterField(
            model_name='atlas_delay',
            name='nbrealrtts',
            field=models.IntegerField(default=0, help_text='Number of RTT samples directly obtained from traceroutes (as opposed to differential RTTs).'),
        ),
        migrations.AlterField(
            model_name='atlas_delay',
            name='nbtracks',
            field=models.IntegerField(default=0, help_text='Number of RTT samples used to compute median RTT (either real or differential RTT).'),
        ),
        migrations.AlterField(
            model_name='atlas_delay',
            name='startpoint',
            field=models.ForeignKey(help_text='Starting location for the delay estimation.', on_delete=django.db.models.deletion.CASCADE, related_name='location_startpoint', to='ihr.Atlas_location'),
        ),
        migrations.AlterField(
            model_name='atlas_delay',
            name='timebin',
            field=models.DateTimeField(db_index=True, help_text='Timestamp of reported value.'),
        ),
        migrations.AlterField(
            model_name='atlas_delay_alarms',
            name='deviation',
            field=models.FloatField(default=0.0, help_text='Significance of the AS Hegemony change.'),
        ),
        migrations.AlterField(
            model_name='atlas_delay_alarms',
            name='endpoint',
            field=models.ForeignKey(help_text='Ending location reported as anomalous.', on_delete=django.db.models.deletion.CASCADE, related_name='anomalous_endpoint', to='ihr.Atlas_location'),
        ),
        migrations.AlterField(
            model_name='atlas_delay_alarms',
            name='startpoint',
            field=models.ForeignKey(help_text='Starting location reported as anomalous.', on_delete=django.db.models.deletion.CASCADE, related_name='anomalous_startpoint', to='ihr.Atlas_location'),
        ),
        migrations.AlterField(
            model_name='atlas_delay_alarms',
            name='timebin',
            field=models.DateTimeField(db_index=True, help_text='Timestamp of reported alarm.'),
        ),
        migrations.AlterField(
            model_name='atlas_location',
            name='af',
            field=models.IntegerField(help_text='Address Family (IP version), values are either 4 or 6.'),
        ),
        migrations.AlterField(
            model_name='atlas_location',
            name='name',
            field=models.CharField(help_text='Location identifier. The meaning of values dependend on the location type: <ul><li>type=AS: ASN</li><li>type=CT: city name, region name, country code</li><li>type=PB: Atlas Probe ID</li><li>type=IP: IP version (4 or 6)</li></ul> ', max_length=255),
        ),
        migrations.AlterField(
            model_name='atlas_location',
            name='type',
            field=models.CharField(help_text='Type of location. Possible values are: <ul><li>AS: Autonomous System</li><li>CT: City</li><li>PB: Atlas Probe</li><li>IP: Whole IP space</li></ul>', max_length=4),
        ),
        migrations.AlterField(
            model_name='delay',
            name='asn',
            field=models.ForeignKey(help_text='ASN or IXP ID of the monitored network (see number in /network/).', on_delete=django.db.models.deletion.CASCADE, to='ihr.ASN'),
        ),
        migrations.AlterField(
            model_name='delay',
            name='magnitude',
            field=models.FloatField(default=0.0, help_text='Cumulated link delay deviation. Values close to zero represent usual delays for the network, whereas higher values stand for significant links congestion in the monitored network.  '),
        ),
        migrations.AlterField(
            model_name='delay',
            name='timebin',
            field=models.DateTimeField(db_index=True, help_text='Timestamp of reported value.'),
        ),
        migrations.AlterField(
            model_name='delay_alarms',
            name='asn',
            field=models.ForeignKey(help_text='ASN or IXPID of the reported network.', on_delete=django.db.models.deletion.CASCADE, to='ihr.ASN'),
        ),
        migrations.AlterField(
            model_name='delay_alarms',
            name='deviation',
            field=models.FloatField(default=0.0, help_text='Distance between observed delays and the past usual values normalized by median absolute deviation.'),
        ),
        migrations.AlterField(
            model_name='delay_alarms',
            name='diffmedian',
            field=models.FloatField(default=0.0, help_text='Difference between the link usual median RTT and the median RTT observed during the alarm.'),
        ),
        migrations.AlterField(
            model_name='delay_alarms',
            name='link',
            field=models.CharField(db_index=True, help_text='Pair of IP addresses corresponding to the reported link.', max_length=128),
        ),
        migrations.AlterField(
            model_name='delay_alarms',
            name='medianrtt',
            field=models.FloatField(default=0.0, help_text='Median differential RTT observed during the alarm.'),
        ),
        migrations.AlterField(
            model_name='delay_alarms',
            name='msm_prb_ids',
            field=django.contrib.postgres.fields.jsonb.JSONField(default=None, help_text='List of Atlas measurement IDs and probe IDs used to compute this alarm.', null=True),
        ),
        migrations.AlterField(
            model_name='delay_alarms',
            name='nbprobes',
            field=models.IntegerField(default=0, help_text='Number of Atlas probes monitoring this link at the reported time window.'),
        ),
        migrations.AlterField(
            model_name='delay_alarms',
            name='timebin',
            field=models.DateTimeField(db_index=True, help_text='Timestamp of reported alarm.'),
        ),
        migrations.AlterField(
            model_name='disco_events',
            name='avglevel',
            field=models.FloatField(default=0.0, help_text='Score representing the coordination of disconnected probes. Higher values stand for a large number of Atlas probes that disconnected in a very short time frame. Events with an avglevel lower than 10 are likely to be false positives detection.'),
        ),
        migrations.AlterField(
            model_name='disco_events',
            name='endtime',
            field=models.DateTimeField(help_text='Estimated end time of the network disconnection. Equal to starttime if the end of the event is unknown.'),
        ),
        migrations.AlterField(
            model_name='disco_events',
            name='nbdiscoprobes',
            field=models.IntegerField(default=0, help_text='Number of Atlas probes that disconnected around the reported start time.'),
        ),
        migrations.AlterField(
            model_name='disco_events',
            name='ongoing',
            field=models.BooleanField(default=False, help_text='Deprecated, this value is unused'),
        ),
        migrations.AlterField(
            model_name='disco_events',
            name='starttime',
            field=models.DateTimeField(help_text='Estimated start time of the network disconnection.'),
        ),
        migrations.AlterField(
            model_name='disco_events',
            name='streamname',
            field=models.CharField(help_text='Name of the topological (ASN) or geographical area where the network disconnection happened.', max_length=128),
        ),
        migrations.AlterField(
            model_name='disco_events',
            name='streamtype',
            field=models.CharField(help_text="Granularity of the detected event. The possible values are asn, country, admin1, and admin2. Admin1 represents a wider area than admin2, the exact definition might change from one country to another. For example 'California, US' is an admin1 stream and 'San Francisco County, California, US' is an admin2 stream.", max_length=10),
        ),
        migrations.AlterField(
            model_name='disco_events',
            name='totalprobes',
            field=models.IntegerField(default=0, help_text='Total number of Atlas probes active in the reported stream (ASN, Country, or geographical area).'),
        ),
        migrations.AlterField(
            model_name='disco_probes',
            name='endtime',
            field=models.DateTimeField(help_text='Reconnection time of the probe, this may not be reported if other probes have reconnected earlier.'),
        ),
        migrations.AlterField(
            model_name='disco_probes',
            name='event',
            field=models.ForeignKey(help_text='ID of the network disconnection event where this probe is reported.', on_delete=django.db.models.deletion.CASCADE, related_name='discoprobes', to='ihr.Disco_events'),
        ),
        migrations.AlterField(
            model_name='disco_probes',
            name='ipv4',
            field=models.CharField(default='None', help_text='Public IP address of the Atlas probe.', max_length=64),
        ),
        migrations.AlterField(
            model_name='disco_probes',
            name='lat',
            field=models.FloatField(default=0.0, help_text='Latitude of the probe during the network detection as reported by RIPE Altas.'),
        ),
        migrations.AlterField(
            model_name='disco_probes',
            name='level',
            field=models.FloatField(default=0.0, help_text='Disconnection level when the probe disconnected.'),
        ),
        migrations.AlterField(
            model_name='disco_probes',
            name='lon',
            field=models.FloatField(default=0.0, help_text='Longitude of the probe during the network detection as reported by RIPE Altas.'),
        ),
        migrations.AlterField(
            model_name='disco_probes',
            name='prefixv4',
            field=models.CharField(default='None', help_text='IP prefix corresponding the probe.', max_length=70),
        ),
        migrations.AlterField(
            model_name='disco_probes',
            name='probe_id',
            field=models.IntegerField(help_text='Atlas probe ID of disconnected probe.'),
        ),
        migrations.AlterField(
            model_name='disco_probes',
            name='starttime',
            field=models.DateTimeField(help_text='Probe disconnection time.'),
        ),
        migrations.AlterField(
            model_name='forwarding',
            name='asn',
            field=models.ForeignKey(help_text='ASN or IXP ID of the monitored network (see number in /network/).', on_delete=django.db.models.deletion.CASCADE, to='ihr.ASN'),
        ),
        migrations.AlterField(
            model_name='forwarding',
            name='magnitude',
            field=models.FloatField(default=0.0, help_text='Cumulated link delay deviation. Values close to zero represent usual delays for the network, whereas higher values stand for significant links congestion in the monitored network.  '),
        ),
        migrations.AlterField(
            model_name='forwarding',
            name='timebin',
            field=models.DateTimeField(db_index=True, help_text='Timestamp of reported value.'),
        ),
        migrations.AlterField(
            model_name='forwarding_alarms',
            name='asn',
            field=models.ForeignKey(help_text='ASN or IXPID of the reported network.', on_delete=django.db.models.deletion.CASCADE, to='ihr.ASN'),
        ),
        migrations.AlterField(
            model_name='forwarding_alarms',
            name='correlation',
            field=models.FloatField(default=0.0, help_text='Correlation coefficient between the usual forwarding pattern and the forwarding pattern observed during the alarm. Values range between 0 and -1. Lowest values represent the most anomalous patterns.'),
        ),
        migrations.AlterField(
            model_name='forwarding_alarms',
            name='ip',
            field=models.CharField(db_index=True, help_text='Reported IP address, this IP address is seen an unusually high or low number of times in Atlas traceroutes.', max_length=64),
        ),
        migrations.AlterField(
            model_name='forwarding_alarms',
            name='msm_prb_ids',
            field=django.contrib.postgres.fields.jsonb.JSONField(default=None, help_text='List of Atlas measurement IDs and probe IDs used to compute this alarm.', null=True),
        ),
        migrations.AlterField(
            model_name='forwarding_alarms',
            name='pktdiff',
            field=models.FloatField(default=0.0, help_text='The difference between the number of times the reported IP is seen in traceroutes compare to its usual appearance.'),
        ),
        migrations.AlterField(
            model_name='forwarding_alarms',
            name='previoushop',
            field=models.CharField(help_text='Last observed IP hop on the usual path.', max_length=64),
        ),
        migrations.AlterField(
            model_name='forwarding_alarms',
            name='responsibility',
            field=models.FloatField(default=0.0, help_text='Responsability score of the reported IP in the forwarding pattern change.'),
        ),
        migrations.AlterField(
            model_name='forwarding_alarms',
            name='timebin',
            field=models.DateTimeField(db_index=True, help_text='Timestamp of reported alarm.'),
        ),
        migrations.AlterField(
            model_name='hegemony',
            name='af',
            field=models.IntegerField(default=0, help_text='Address Family (IP version), values are either 4 or 6.'),
        ),
        migrations.AlterField(
            model_name='hegemony',
            name='asn',
            field=models.ForeignKey(help_text='Dependency. Transit network commonly seen in BGP paths towards originasn.', on_delete=django.db.models.deletion.CASCADE, to='ihr.ASN'),
        ),
        migrations.AlterField(
            model_name='hegemony',
            name='hege',
            field=models.FloatField(default=0.0, help_text='AS Hegemony is the estimated fraction of paths towards the originasn. The values range between 0 and 1, low values represent a small number of path (low dependency) and values close to 1 represent strong dependencies.'),
        ),
        migrations.AlterField(
            model_name='hegemony',
            name='originasn',
            field=models.ForeignKey(help_text='Dependent network, it can be any public ASN. Retrieve all dependencies of a network by setting only this parameter and a timebin.', on_delete=django.db.models.deletion.CASCADE, related_name='local_graph', to='ihr.ASN'),
        ),
        migrations.AlterField(
            model_name='hegemony',
            name='timebin',
            field=models.DateTimeField(db_index=True, help_text='Timestamp of reported value.'),
        ),
        migrations.AlterField(
            model_name='hegemony_alarms',
            name='af',
            field=models.IntegerField(help_text='Address Family (IP version), values are either 4 or 6.'),
        ),
        migrations.AlterField(
            model_name='hegemony_alarms',
            name='asn',
            field=models.ForeignKey(help_text='ASN of the anomalous dependency (transit network).', on_delete=django.db.models.deletion.CASCADE, related_name='anomalous_asn', to='ihr.ASN'),
        ),
        migrations.AlterField(
            model_name='hegemony_alarms',
            name='deviation',
            field=models.FloatField(default=0.0, help_text='Significance of the AS Hegemony change.'),
        ),
        migrations.AlterField(
            model_name='hegemony_alarms',
            name='originasn',
            field=models.ForeignKey(help_text='ASN of the reported dependent network.', on_delete=django.db.models.deletion.CASCADE, related_name='anomalous_originasn', to='ihr.ASN'),
        ),
        migrations.AlterField(
            model_name='hegemony_alarms',
            name='timebin',
            field=models.DateTimeField(db_index=True, help_text='Timestamp of reported alarm.'),
        ),
        migrations.AlterField(
            model_name='hegemonycone',
            name='af',
            field=models.IntegerField(default=0, help_text='Address Family (IP version), values are either 4 or 6.'),
        ),
        migrations.AlterField(
            model_name='hegemonycone',
            name='asn',
            field=models.ForeignKey(help_text='Autonomous System Number (ASN).', on_delete=django.db.models.deletion.CASCADE, to='ihr.ASN'),
        ),
        migrations.AlterField(
            model_name='hegemonycone',
            name='conesize',
            field=models.IntegerField(default=0, help_text="Number of dependent networks, namely, networks that are reached through the asn, this is similar to CAIDA's customer cone size. The detailed list of all dependent networks is obtained by querying /hegemony/ with parameter asn (e.g /hegemony/?asn=2497&timebin=2020-03-01 gives IIJ's customer networks)."),
        ),
        migrations.AlterField(
            model_name='hegemonycone',
            name='timebin',
            field=models.DateTimeField(db_index=True, help_text='Timestamp of reported value.'),
        ),
        migrations.CreateModel(
            name='Hegemony_country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timebin', models.DateTimeField(db_index=True, help_text='Timestamp of reported value.')),
                ('hege', models.FloatField(default=0.0, help_text='AS Hegemony is the estimated fraction of paths towards the originasn. The values range between 0 and 1, low values represent a small number of path (low dependency) and values close to 1 represent strong dependencies.')),
                ('af', models.IntegerField(default=0, help_text='Address Family (IP version), values are either 4 or 6.')),
                ('weight', models.FloatField(default=0.0, help_text='Absolute weight given to the ASN for the AS Hegemony calculation.')),
                ('weightScheme', models.CharField(default='None', help_text='Weighting scheme used for the AS Hegemony calculation.', max_length=16)),
                ('transit_only', models.BooleanField(default=False, help_text='If True, then origin ASNs of BGP path are ignored (focus only on transit networks).')),
                ('asn', models.ForeignKey(help_text='Dependency. Network commonly seen in BGP paths towards monitored country.', on_delete=django.db.models.deletion.CASCADE, to='ihr.ASN')),
                ('country', models.ForeignKey(help_text='Monitored country. Retrieve all dependencies of a country by setting only this parameter and a timebin.', on_delete=django.db.models.deletion.CASCADE, to='ihr.Country')),
            ],
            options={
                'base_manager_name': 'objects',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
    ]
